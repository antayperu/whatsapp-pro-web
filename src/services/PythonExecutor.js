// ===============================================================
// PythonExecutor.js - COMUNICACI√ìN TIEMPO REAL CORREGIDA
// ===============================================================
// CORREGIDO: Lee archivos JSON en lugar de localStorage
// FUNCIONA: Con el Python que escribe archivos whatsapp_progreso.json

class PythonExecutor {
  constructor() {
    this.version = '1.0';
    this.procesoActivo = false;
    this.procesoPausado = false;
    this.contactosTotal = 0;
    this.contactosEnviados = 0;
    this.contactosFallidos = 0;
    this.tiempoInicio = null;
    
    // Callbacks para la interfaz web
    this.onProgresoCallback = null;
    this.onLogCallback = null;
    this.onEstadoCallback = null;
    this.onCompletadoCallback = null;
    
    // Control de archivos de comunicaci√≥n
    this.archivoProgreso = 'whatsapp_progreso.json';
    this.archivoControl = 'whatsapp_control.json';
    this.archivoLogs = 'whatsapp_logs.json';
    
    // Intervalo de monitoreo
    this.intervalMonitoreo = null;
    
    console.log('üöÄ PythonExecutor v1.0 inicializado para comunicaci√≥n con archivos');
  }

  /**
   * M√âTODO PRINCIPAL: Ejecutar proceso Python con comunicaci√≥n tiempo real
   */
  async ejecutarConComunicacion(contactos, configuracion = {}) {
    try {
      console.log('üéØ Iniciando ejecuci√≥n con comunicaci√≥n tiempo real...');
      
      if (!contactos || contactos.length === 0) {
        throw new Error('No hay contactos para enviar');
      }
      
      this.contactosTotal = contactos.length;
      this.contactosEnviados = 0;
      this.contactosFallidos = 0;
      this.tiempoInicio = Date.now();
      
      // Preparar archivos de comunicaci√≥n
      await this.prepararComunicacion();
      
      // Generar c√≥digo Python con comunicaci√≥n
      const pythonConComunicacion = this.generarPythonConComunicacion(contactos, configuracion);
      
      // Crear archivo .BAT con comunicaci√≥n
      const batConComunicacion = this.crearBatConComunicacion(pythonConComunicacion);
      
      // Descargar archivo .BAT mejorado
      this.descargarArchivo(batConComunicacion.contenido, batConComunicacion.nombre);
      
      // Iniciar monitoreo en tiempo real
      this.iniciarMonitoreoTiempoReal();
      
      // Notificar a la interfaz
      this.notificarEstado('üöÄ Archivo .BAT generado. Ejecuta el archivo descargado para iniciar.');
      
      return {
        success: true,
        message: 'Ejecutor preparado. Ejecuta el archivo .BAT descargado.',
        archivo: batConComunicacion.nombre,
        contactos: this.contactosTotal
      };
      
    } catch (error) {
      console.error('‚ùå Error en ejecutarConComunicacion:', error);
      this.notificarEstado('‚ùå Error: ' + error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * PREPARAR COMUNICACI√ìN: Crear archivos de comunicaci√≥n iniciales
   */
  async prepararComunicacion() {
    console.log('üìÅ Preparando archivos de comunicaci√≥n...');
    
    // Archivo de control inicial
    const controlInicial = {
      comando: 'ejecutar',
      velocidad: 'normal',
      ultimaActualizacion: new Date().toISOString()
    };
    
    // Escribir archivo de control inicial
    this.escribirArchivoControl(controlInicial);
    
    console.log('‚úÖ Archivos de comunicaci√≥n preparados');
  }

  /**
   * GENERAR PYTHON CON COMUNICACI√ìN: C√≥digo Python que comunica progreso
   */
  generarPythonConComunicacion(contactos, config) {
    console.log('üêç Generando c√≥digo Python con comunicaci√≥n tiempo real...');
    
    const configuracion = {
      velocidad: config.velocidad || 'normal',
      reintentos: 3,
      timeout: 30,
      ...config
    };
    
    const pythonCode = `#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ WhatsApp Pro Sender - Versi√≥n con Comunicaci√≥n Tiempo Real
üíº Optimizado para emprendedores - Feedback inmediato
‚ö° Genera progreso en vivo para la interfaz web
"""

import json
import time
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import urllib.parse
import base64

class WhatsAppSenderComunicacion:
    def __init__(self):
        self.driver = None
        self.archivo_progreso = "whatsapp_progreso.json"
        self.archivo_control = "whatsapp_control.json" 
        self.archivo_logs = "whatsapp_logs.json"
        self.contactos_enviados = 0
        self.contactos_fallidos = 0
        self.total_contactos = 0
        
    def escribir_progreso(self, estado, contacto_actual=""):
        """Escribir progreso para que la web lo lea"""
        try:
            porcentaje = (self.contactos_enviados / self.total_contactos * 100) if self.total_contactos > 0 else 0
            
            progreso = {
                "total": self.total_contactos,
                "enviados": self.contactos_enviados,
                "fallidos": self.contactos_fallidos,
                "porcentaje": round(porcentaje, 1),
                "estado": estado,
                "contactoActual": contacto_actual,
                "ultimaActualizacion": datetime.now().isoformat()
            }
            
            with open(self.archivo_progreso, 'w', encoding='utf-8') as f:
                json.dump(progreso, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print(f"Error escribiendo progreso: {e}")
    
    def escribir_log(self, mensaje, tipo="info"):
        """Escribir log para que la web lo lea"""
        try:
            logs_data = {"logs": []}
            if os.path.exists(self.archivo_logs):
                with open(self.archivo_logs, 'r', encoding='utf-8') as f:
                    logs_data = json.load(f)
            
            nuevo_log = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "mensaje": mensaje,
                "tipo": tipo
            }
            
            logs_data["logs"].append(nuevo_log)
            logs_data["ultimaActualizacion"] = datetime.now().isoformat()
            
            if len(logs_data["logs"]) > 50:
                logs_data["logs"] = logs_data["logs"][-50:]
            
            with open(self.archivo_logs, 'w', encoding='utf-8') as f:
                json.dump(logs_data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print(f"Error escribiendo log: {e}")
    
    def leer_comando_control(self):
        """Leer comando de control desde la web"""
        try:
            if os.path.exists(self.archivo_control):
                with open(self.archivo_control, 'r', encoding='utf-8') as f:
                    control = json.load(f)
                    return control.get("comando", "ejecutar")
        except Exception as e:
            print(f"Error leyendo control: {e}")
        return "ejecutar"
    
    def configurar_chrome(self):
        """Configurar Chrome para m√°xima compatibilidad"""
        chrome_options = Options()
        
        configuraciones = [
            "--headless",
            "--disable-blink-features=AutomationControlled",
            "--disable-extensions",
            "--no-sandbox",
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--remote-debugging-port=9222",
            "--user-data-dir=chrome_whatsapp_data",
            "--disable-background-timer-throttling",
            "--disable-backgrounding-occluded-windows",
            "--disable-renderer-backgrounding",
            "--disable-features=TranslateUI",
            "--disable-ipc-flooding-protection",
            "--window-size=1920,1080"
        ]
        
        for config in configuraciones:
            chrome_options.add_argument(config)
        
        prefs = {
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_settings.popups": 0,
            "profile.managed_default_content_settings.images": 2
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        self.escribir_log("üîß Configurando Chrome para WhatsApp...", "info")
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.set_page_load_timeout(30)
            self.escribir_log("‚úÖ Chrome configurado correctamente", "success")
            return True
        except Exception as e:
            self.escribir_log(f"‚ùå Error configurando Chrome: {e}", "error")
            return False
    
    def cerrar_popups_whatsapp(self):
        """Cerrar todos los popups de WhatsApp autom√°ticamente"""
        popups_selectores = [
            "//div[contains(text(), 'Permitir notificaciones')]//parent::*//button",
            "//button[contains(text(), 'No mostrar de nuevo')]",
            "//button[contains(text(), 'Continuar al chat')]",
            "//div[@role='button'][contains(text(), 'Aceptar')]",
            "//button[contains(text(), 'Aceptar')]",
            "//button[contains(text(), 'OK')]",
            "//div[@role='button'][contains(text(), 'Entendido')]"
        ]
        
        for selector in popups_selectores:
            try:
                elemento = WebDriverWait(self.driver, 2).until(
                    EC.element_to_be_clickable((By.XPATH, selector))
                )
                elemento.click()
                time.sleep(1)
                self.escribir_log("‚úÖ Popup cerrado autom√°ticamente", "info")
            except:
                continue
    
    def enviar_mensaje_contacto(self, contacto):
        """Enviar mensaje a un contacto espec√≠fico"""
        try:
            nombre = contacto.get('nombre', 'Sin nombre')
            telefono = contacto.get('telefono', '')
            mensaje = contacto.get('mensaje', '')
            
            if not telefono or not mensaje:
                self.escribir_log(f"‚ùå Datos incompletos para {nombre}", "error")
                return False
            
            telefono_limpio = ''.join(filter(str.isdigit, telefono))
            if not telefono_limpio.startswith('51'):
                telefono_limpio = '51' + telefono_limpio
            
            mensaje_encoded = urllib.parse.quote(mensaje)
            url = f"https://web.whatsapp.com/send?phone={telefono_limpio}&text={mensaje_encoded}"
            
            self.escribir_progreso(f"Enviando a {nombre}...", nombre)
            self.escribir_log(f"üì± Enviando mensaje a {nombre} ({telefono})", "info")
            
            self.driver.get(url)
            time.sleep(3)
            
            self.cerrar_popups_whatsapp()
            
            comando = self.leer_comando_control()
            if comando == "pausar":
                self.escribir_log("‚è∏Ô∏è Proceso pausado por el usuario", "warning")
                while self.leer_comando_control() == "pausar":
                    time.sleep(2)
                self.escribir_log("‚ñ∂Ô∏è Proceso reanudado", "info")
            elif comando == "detener":
                self.escribir_log("üõë Proceso detenido por el usuario", "warning")
                return False
            
            try:
                boton_enviar = WebDriverWait(self.driver, 15).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[@data-icon='send']"))
                )
                boton_enviar.click()
                time.sleep(${configuracion.velocidad === 'lenta' ? '5' : configuracion.velocidad === 'rapida' ? '2' : '3'})
                
                self.contactos_enviados += 1
                self.escribir_log(f"‚úÖ Mensaje enviado a {nombre}", "success")
                return True
                
            except TimeoutException:
                self.escribir_log(f"‚ùå No se pudo enviar a {nombre} - Timeout", "error")
                self.contactos_fallidos += 1
                return False
                
        except Exception as e:
            self.escribir_log(f"‚ùå Error enviando a {nombre}: {e}", "error")
            self.contactos_fallidos += 1
            return False
    
    def ejecutar_envio(self, contactos):
        """Ejecutar env√≠o masivo con comunicaci√≥n"""
        self.total_contactos = len(contactos)
        
        print("üöÄ WhatsApp Pro Sender - Iniciando env√≠o masivo...")
        self.escribir_log("üöÄ Iniciando WhatsApp Pro Sender", "info")
        self.escribir_progreso("Configurando Chrome...")
        
        if not self.configurar_chrome():
            self.escribir_progreso("‚ùå Error configurando Chrome")
            return False
        
        try:
            self.escribir_progreso("Conectando a WhatsApp Web...")
            self.escribir_log("üåê Conectando a WhatsApp Web...", "info")
            self.driver.get("https://web.whatsapp.com")
            
            self.escribir_log("üì± Escanea el c√≥digo QR para continuar", "info")
            self.escribir_progreso("Esperando escaneo QR...")
            
            try:
                qr_element = WebDriverWait(self.driver, 30).until(
                    EC.presence_of_element_located((By.XPATH, "//div[@data-testid='qrcode']"))
                )
                
                self.escribir_log("üì∑ Capturando c√≥digo QR...", "info")
                qr_element.screenshot('whatsapp_qr.png')
                self.escribir_log("‚úÖ C√≥digo QR guardado como whatsapp_qr.png. Escan√©alo para continuar.", "success")
                self.escribir_progreso("QR Guardado. Escan√©alo para continuar.")

                WebDriverWait(self.driver, 120).until(
                    EC.presence_of_element_located((By.XPATH, "//div[@contenteditable='true'][@data-tab='3']"))
                )
            except TimeoutException:
                self.escribir_log("‚ùå No se detect√≥ c√≥digo QR o se tard√≥ mucho en escanear.", "error")
                self.escribir_progreso("‚ùå Error con c√≥digo QR")
                raise
            
            self.escribir_log("‚úÖ WhatsApp Web conectado correctamente", "success")
            self.escribir_progreso("Iniciando env√≠o de mensajes...")
            
            for i, contacto in enumerate(contactos, 1):
                self.escribir_progreso(f"Procesando contacto {i} de {self.total_contactos}...")
                
                comando = self.leer_comando_control()
                if comando == "detener":
                    self.escribir_log("üõë Env√≠o detenido por el usuario", "warning")
                    break
                
                self.enviar_mensaje_contacto(contacto)
                time.sleep(2)
            
            self.escribir_progreso("‚úÖ Env√≠o completado")
            self.escribir_log(f"üìä Resumen: {self.contactos_enviados} enviados, {self.contactos_fallidos} fallidos", "info")
            
            return True
            
        except Exception as e:
            self.escribir_log(f"‚ùå Error durante el env√≠o: {e}", "error")
            self.escribir_progreso(f"‚ùå Error: {e}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()
                self.escribir_log("üîö Navegador cerrado", "info")

# Datos de contactos generados desde la web
contactos = ${JSON.stringify(contactos, null, 2)}

if __name__ == "__main__":
    sender = WhatsAppSenderComunicacion()
    try:
        sender.ejecutar_envio(contactos)
    except KeyboardInterrupt:
        print("\\nüõë Env√≠o interrumpido por el usuario")
        sender.escribir_log("üõë Env√≠o interrumpido manualmente", "warning")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        sender.escribir_log(f"‚ùå Error inesperado: {e}", "error")
`;

    console.log('‚úÖ C√≥digo Python con comunicaci√≥n generado');
    return pythonCode;
  }

  /**
   * CREAR BAT CON COMUNICACI√ìN: Archivo .BAT que maneja comunicaci√≥n
   */
  crearBatConComunicacion(pythonCode) {
    console.log('üìÑ Creando archivo .BAT con comunicaci√≥n...');
    
    const nombreArchivo = `WhatsApp_Sender_${new Date().toISOString().split('T')[0]}.bat`;
    
    const batContent = `@echo off
chcp 65001 > nul
title WhatsApp Pro Sender - Con Comunicaci√≥n Tiempo Real
color 0A

echo.
echo ================================================================
echo    üöÄ WhatsApp Pro Sender - Versi√≥n Emprendedores
echo    ‚ö° Con comunicaci√≥n tiempo real a la web
echo ================================================================
echo.

REM Crear archivo Python temporal
echo üìù Preparando c√≥digo Python...
(
echo.${pythonCode.replace(/\n/g, '\necho.')}
) > whatsapp_sender_temp.py

echo.
echo ‚úÖ C√≥digo Python preparado
echo üîß Instalando dependencias necesarias...
echo.

REM Instalar dependencias si no existen
pip install selenium webdriver-manager requests urllib3 --quiet --disable-pip-version-check

echo.
echo üöÄ Iniciando WhatsApp Sender...
echo üì± La interfaz web mostrar√° el progreso en tiempo real
echo.

REM Ejecutar Python
python whatsapp_sender_temp.py

echo.
echo ‚úÖ Proceso completado
echo üìä Revisa los resultados en la interfaz web
echo.
pause

REM Limpiar archivos temporales
del whatsapp_sender_temp.py 2>nul
`;

    return {
      contenido: batContent,
      nombre: nombreArchivo
    };
  }

  /**
   * INICIAR MONITOREO TIEMPO REAL: CORREGIDO - Lee archivos JSON
   */
  iniciarMonitoreoTiempoReal() {
    console.log('üëÄ Iniciando monitoreo tiempo real...');
    
    if (this.intervalMonitoreo) {
      clearInterval(this.intervalMonitoreo);
    }
    
    this.procesoActivo = true;
    
    this.intervalMonitoreo = setInterval(() => {
      this.leerProgresoYActualizar();
    }, 1000);
    
    this.notificarEstado('üëÄ Monitoreo tiempo real activo');
  }

  /**
   * FUNCI√ìN CORREGIDA: Lee archivos JSON en lugar de localStorage
   */
  async leerProgresoYActualizar() {
    try {
      // Leer progreso desde archivo JSON
      try {
        const response = await fetch('./whatsapp_progreso.json?t=' + Date.now());
        const progreso = await response.json();
        
        this.contactosEnviados = progreso.enviados || 0;
        this.contactosFallidos = progreso.fallidos || 0;
        
        if (this.onProgresoCallback) {
          this.onProgresoCallback({
            total: progreso.total,
            enviados: progreso.enviados,
            fallidos: progreso.fallidos,
            porcentaje: progreso.porcentaje,
            contactoActual: progreso.contactoActual,
            estado: progreso.estado
          });
        }
      } catch (error) {
        // Archivo no existe a√∫n, es normal al inicio
      }
      
      // Leer logs desde archivo JSON
      try {
        const responseLog = await fetch('./whatsapp_logs.json?t=' + Date.now());
        const logs = await responseLog.json();
        
        if (this.onLogCallback && logs.logs) {
          // Solo enviar logs nuevos
          logs.logs.forEach(log => {
            this.onLogCallback(log.mensaje, log.tipo, log.timestamp);
          });
        }
      } catch (error) {
        // Archivo no existe a√∫n, es normal al inicio
      }
      
    } catch (error) {
      console.error('Error leyendo archivos de progreso:', error);
    }
  }

  /**
   * CONTROL DE PROCESO: Pausar, reanudar, detener
   */
  pausarProceso() {
    console.log('‚è∏Ô∏è Pausando proceso...');
    this.procesoPausado = true;
    this.escribirComando('pausar');
    this.notificarEstado('‚è∏Ô∏è Proceso pausado');
  }

  reanudarProceso() {
    console.log('‚ñ∂Ô∏è Reanudando proceso...');
    this.procesoPausado = false;
    this.escribirComando('ejecutar');
    this.notificarEstado('‚ñ∂Ô∏è Proceso reanudado');
  }

  detenerProceso() {
    console.log('üõë Deteniendo proceso...');
    this.procesoActivo = false;
    this.escribirComando('detener');
    this.notificarEstado('üõë Proceso detenido');
    
    if (this.intervalMonitoreo) {
      clearInterval(this.intervalMonitoreo);
      this.intervalMonitoreo = null;
    }
  }

  /**
   * ESCRIBIR COMANDO: Enviar comando a Python mediante archivo JSON
   */
  async escribirComando(comando) {
    try {
      const control = {
        comando: comando,
        ultimaActualizacion: new Date().toISOString()
      };
      
      // Escribir archivo de control
      const blob = new Blob([JSON.stringify(control, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'whatsapp_control.json';
      link.click();
      URL.revokeObjectURL(url);
      
      console.log(`üìù Comando enviado: ${comando}`);
      
    } catch (error) {
      console.error('Error escribiendo comando:', error);
    }
  }

  /**
   * ESCRIBIR ARCHIVO CONTROL: Para comandos iniciales
   */
  escribirArchivoControl(datos) {
    try {
      const blob = new Blob([JSON.stringify(datos, null, 2)], { type: 'application/json' });
      // Este archivo se usar√° para control inicial
    } catch (error) {
      console.error('Error preparando archivo de control:', error);
    }
  }

  /**
   * CALLBACKS: Configurar callbacks para la interfaz
   */
  onProgreso(callback) {
    this.onProgresoCallback = callback;
  }

  onLog(callback) {
    this.onLogCallback = callback;
  }

  onEstado(callback) {
    this.onEstadoCallback = callback;
  }

  onCompletado(callback) {
    this.onCompletadoCallback = callback;
  }

  /**
   * NOTIFICAR ESTADO: Notificar cambios de estado
   */
  notificarEstado(mensaje) {
    console.log(`üì¢ Estado: ${mensaje}`);
    if (this.onEstadoCallback) {
      this.onEstadoCallback(mensaje);
    }
  }

  /**
   * DESCARGAR ARCHIVO: Descargar .BAT mejorado
   */
  descargarArchivo(contenido, nombreArchivo) {
    try {
      const blob = new Blob([contenido], { type: 'text/plain;charset=utf-8' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      
      link.href = url;
      link.download = nombreArchivo;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      console.log(`üíæ Archivo descargado: ${nombreArchivo}`);
      this.notificarEstado(`üíæ Archivo ${nombreArchivo} descargado correctamente`);
      
    } catch (error) {
      console.error('Error descargando archivo:', error);
      this.notificarEstado('‚ùå Error descargando archivo');
    }
  }

  /**
   * OBTENER ESTAD√çSTICAS: Para mostrar en la interfaz
   */
  obtenerEstadisticas() {
    const tiempoTranscurrido = this.tiempoInicio ? Date.now() - this.tiempoInicio : 0;
    const minutos = Math.floor(tiempoTranscurrido / 60000);
    const segundos = Math.floor((tiempoTranscurrido % 60000) / 1000);
    
    return {
      procesoActivo: this.procesoActivo,
      procesoPausado: this.procesoPausado,
      contactosTotal: this.contactosTotal,
      contactosEnviados: this.contactosEnviados,
      contactosFallidos: this.contactosFallidos,
      porcentajeCompletado: this.contactosTotal > 0 ? 
        Math.round((this.contactosEnviados / this.contactosTotal) * 100) : 0,
      tiempoTranscurrido: `${minutos}:${segundos.toString().padStart(2, '0')}`,
      tiempoTranscurridoMs: tiempoTranscurrido
    };
  }

  /**
   * CLEANUP: Limpiar recursos
   */
  cleanup() {
    if (this.intervalMonitoreo) {
      clearInterval(this.intervalMonitoreo);
      this.intervalMonitoreo = null;
    }
    
    this.procesoActivo = false;
    this.procesoPausado = false;
    
    console.log('üßπ Recursos limpiados');
  }
}

// Instancia singleton para uso inmediato
const pythonExecutor = new PythonExecutor();

export default pythonExecutor;